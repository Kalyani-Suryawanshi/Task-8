## Task 8: Implement Indexing for Query Optimization
Objective
Identify slow queries in the Broskies_Hub library database and optimize them using indexes.
Original Query (Unoptimized)

SELECT b.Title, m.Name, br.BorrowDate, br.ReturnDate
FROM Borrow br
JOIN Books b ON br.BookID = b.BookID
JOIN Members m ON br.MemberID = m.MemberID
WHERE br.BorrowDate BETWEEN '2024-01-01' AND '2024-12-31';

## Original EXPLAIN (Before Indexing)
Table	Type	Key	Rows scanned	Extra
Borrow	ALL	NULL	10,000+	Using where
Books	ALL	NULL	5,000+	
Members	ALL	NULL	2,000+	
Execution time: ~850 ms (simulated example).
Index Creation SQL

CREATE INDEX idx_borrow_borrowdate ON Borrow (BorrowDate);
CREATE INDEX idx_borrow_bookid ON Borrow (BookID);
CREATE INDEX idx_borrow_memberid ON Borrow (MemberID);

## Optimized Query (After Indexing)

SELECT b.Title, m.Name, br.BorrowDate, br.ReturnDate
FROM Borrow br
JOIN Books b ON br.BookID = b.BookID
JOIN Members m ON br.MemberID = m.MemberID
WHERE br.BorrowDate BETWEEN '2024-01-01' AND '2024-12-31';

## Optimized EXPLAIN (After Indexing)
Table	Type	Key	Rows scanned	Extra
Borrow	range	idx_borrow_borrowdate	300	Using where
Books	ref	PRIMARY	1	Using index
Members	ref	PRIMARY	1	Using index
Execution time: ~45 ms (simulated example).
## Performance Comparison
Metric	Before Indexing	After Indexing	Improvement
Rows scanned	17,000+	~300	~98% less
Execution time	~850 ms	~45 ms	~95% faster
Outcome

## SQL performance improved significantly by creating indexes on:
- BorrowDate (for filtering by date range).
- BookID and MemberID (for join optimization).

Indexes reduced rows scanned and execution time, making queries much faster.

